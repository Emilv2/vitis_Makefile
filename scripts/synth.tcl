################################################################################
##                                  Setup                                     ##
################################################################################

source init.tcl

# delete the outdate cache
# seems to be a vivado bug with external files :/
file delete -force -- .srcs
file delete -force -- .cache

# set board_store with the pynq board files
set_param board.repoPaths ../board_store

if { $argc != 8 } {
  puts "The synth script requires 8 arguments"
  exit 1
}

# Parse Flags
while {[llength $argv]} {
  #   puts $argv
  set flag [lindex $argv 0]
  #puts "flag: ($flag)"

  switch -glob $flag {
    -ip_name  {
      set ip_name [lindex $argv 1]
      set argv  [lrange $argv 2 end]

    } -ip_major_version {
      set ip_major_version  [lindex $argv 1]
      set argv  [lrange $argv 2 end]

    } -ip_minor_version {
      set ip_minor_version  [lindex $argv 1]
      set argv  [lrange $argv 2 end]

    } -library_name {
      set library_name  [lindex $argv 1]
      set argv  [lrange $argv 2 end]

    } -h* {
      #help
      puts "USAGE:"
      puts "-ip_name: name of the vivado ip"
      puts "-ip_major_version: major version of the ip"
      puts "-ip_minor_version: minor version of the ip"
      puts "-library_name: library the vhld files should be put in"
      exit 1

    } -* {
      # unknown option
      error "unknown option [lindex $argv 0], use -h for help"

    } default break
  }
}

# check if we have all files
lindex $ip_name
lindex $ip_major_version
lindex $ip_minor_version
lindex $library_name



# set the ip settings
set ip_version ${ip_major_version}.${ip_minor_version}
set ip_name_long ${ip_name}_${ip_version}
set proj_name ${ip_name}_proj
set ip_topfile ${ip_name}_v${ip_major_version}_${ip_minor_version}

set_param project.defaultIPCacheSetting none

set proj_topfile design_1_wrapper.vhd

if { [file isdirectory ../"IP"] } {
  # if the IP files exist, we already generated the IP, so we can just
  # read the ip definition (.xci)
  read_ip ../IP/$ip_name
} else {
  # IP folder does not exist. Create IP folder
  file mkdir ../IP

  create_project $ip_name_long -in_memory
  current_project $ip_name_long


  set origin_dir "/home/emil/Documents/master/thesis/fpga/zybo"

  set_property \
    -name "part" \
    -value "xc7z020clg400-1" \
    -objects [current_project]
  set_property \
    -name "board_part" \
    -value "tul.com.tw:pynq-z2:part0:1.0" \
    -objects [current_project]
  set_property \
    -name "board_part_repo_paths" \
    -value "[file normalize "../board_store"]" \
    -objects [current_project]
  set_property \
    -name "default_lib" \
    -value "xil_defaultlib" \
    -objects [current_project]
  set_property \
    -name "mem.enable_memory_map_generation" \
    -value "1" \
    -objects [current_project]
  set_property \
    -name "platform.board_id" \
    -value "pynq-z2" \
    -objects [current_project]
  set_property \
    -name "simulator_language" \
    -value "Mixed" \
    -objects [current_project]
  set_property \
    -name "target_language" \
    -value "vhdl" \
    -objects [current_project]
  set_property \
    -name "xpm_libraries" \
    -value "XPM_CDC XPM_FIFO XPM_MEMORY" \
    -objects [current_project]


  update_ip_catalog -rebuild

  create_peripheral user.org user $ip_name ${ip_version} \
    -dir ../IP/$ip_name
  add_peripheral_interface M00_AXIS \
    -interface_mode master \
    -axi_type stream [ipx::find_open_core user.org:user:${ip_name}:${ip_version}]
  add_peripheral_interface S00_AXI -interface_mode slave \
    -axi_type lite [ipx::find_open_core user.org:user:${ip_name}:${ip_version}]
  generate_peripheral \
    -driver \
    -force [ipx::find_open_core user.org:user:${ip_name}:${ip_version}]
  write_peripheral [ipx::find_open_core user.org:user:${ip_name}:${ip_version}]


 # set_property  ip_repo_paths  ../IP/$ip_name_long [current_project]
  set_property \
    -name "ip_repo_paths" \
    -value "../IP/$ip_name_long" \
    -objects [current_project]

  update_ip_catalog -rebuild

  ipx::edit_ip_in_project -upgrade true -name edit_${ip_topfile} -directory ../IP ../IP/$ip_name_long/component.xml

  update_compile_order -fileset sources_1
  # first remove the stupid autogenerated files
#  remove_files [get_files]

  # Read in source files
  read_vhdl -library ${library_name} [glob ../src/ip/vhdl/*.vhd]
  read_vhdl -vhdl2008 -library ${library_name} [glob ../src/ip/vhdl2008/*.vhd]

  update_compile_order -fileset sources_1

  set_property \
    -name "top" \
    -value "$ip_topfile" \
    -objects [current_fileset]

  update_compile_order -fileset sources_1
}

# repackage user ip
ipx::open_ipxact_file ../IP/${ip_name}/${ip_name_long}/component.xml
ipx::merge_project_changes compability [ipx::current_core]
ipx::merge_project_changes hdl_parameters [ipx::current_core]
ipx::merge_project_changes files [ipx::current_core]
ipx::merge_project_changes ports [ipx::current_core]
set current_rev [get_property core_revision [ipx::current_core]]
set new_rev [expr $current_rev + 1]
set_property core_revision $new_rev [ipx::current_core]
ipx::create_xgui_files [ipx::current_core]
ipx::update_checksums [ipx::current_core]
ipx::save_core [ipx::current_core]

close_project

# the actual project
create_project $proj_name -in_memory
current_project $proj_name
set_property \
  -name "part" \
  -value "xc7z020clg400-1" \
  -objects [current_project]
set_property \
  -name "board_part" \
  -value "tul.com.tw:pynq-z2:part0:1.0" \
  -objects [current_project]
set_property \
  -name "ip_repo_paths" \
  -value ../IP \
  -objects [current_project]
set_property \
  -name "board_part_repo_paths" \
  -value "[file normalize "../board_store"]" \
  -objects [current_project]
set_property \
  -name "target_language" \
  -value "vhdl" \
  -objects [current_project]

# create the block design
source create_bd.tcl
cr_bd_design_1 "" $ip_name $ip_version

# update & upgrade ip
#update_ip_catalog -rebuild -repo_path ../IP
update_ip_catalog
upgrade_ip -vlnv \
  user.org:user:${ip_name}:${ip_version} [get_ips  design_1_${ip_name}_0_0]

# make and read the design wrapper topfile
make_wrapper -files [get_files design_1.bd] -top
generate_target {synthesis implementation} [get_files design_1.bd]
read_vhdl -vhdl2008 .srcs/sources_1/bd/design_1/hdl/design_1_wrapper.vhd

# read the constraint files if there are any
catch {
  read_xdc [glob ../src/constraints/*.xdc]
}

# save the block design for debugging
save_bd_design_as -force -dir ../output block_design

################################################################################
##                                  Synth                                     ##
################################################################################

# change some warnings to errors
source msg_config.tcl
set_msg

# synthesise the desigjn
synth_design -top design_1_wrapper

# write a checkpoint that we can reuse for placement
write_checkpoint -force ../output/post_synth

# create some reports
report_utilization -file ../output/post_synth_util.rpt
report_timing \
  -sort_by group \
  -max_paths 5 \
  -path_type summary \
  -file ../output/post_synth_timing.rpt
